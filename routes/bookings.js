const express = require("express");
const router = express.Router();
const bookingController = require("../controllers/bookings");

// üè® L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·∫∑t ph√≤ng
router.get("/", async (req, res) => {
    try {
        const userId = req.query.userId; // L·∫•y userId t·ª´ query params
        if (!userId) {
            return res.status(400).json({ success: false, message: "User ID is required" });
        }
        const bookings = await bookingController.getUserBookings(userId);
        res.status(200).json({ success: true, data: bookings });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// üè® T·∫°o ƒë·∫∑t ph√≤ng m·ªõi
router.post("/", async (req, res) => {
    try {
        const { userId, roomId, checkInDate, checkOutDate } = req.body;
        const newBooking = await bookingController.createBooking(userId, roomId, checkInDate, checkOutDate);
        res.status(201).json({ success: true, data: newBooking });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// üìã L·∫•y th√¥ng tin chi ti·∫øt ƒë·∫∑t ph√≤ng theo ID
router.get("/:id", async (req, res) => {
    try {
        const booking = await bookingController.getBookingById(req.params.id);
        if (!booking) {
            return res.status(404).json({ success: false, message: "ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i" });
        }
        res.status(200).json({ success: true, data: booking });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ‚úè C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t ph√≤ng theo ID
router.put("/:id", async (req, res) => {
    try {
        const updatedBooking = await bookingController.updateBooking(req.params.id, req.body);
        if (!updatedBooking) {
            return res.status(404).json({ success: false, message: "ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i" });
        }
        res.status(200).json({ success: true, data: updatedBooking });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ‚ùå H·ªßy ƒë·∫∑t ph√≤ng
router.delete("/:id", async (req, res) => {
    try {
        const canceledBooking = await bookingController.cancelBooking(req.params.id);
        if (!canceledBooking) {
            return res.status(404).json({ success: false, message: "ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i" });
        }
        res.status(200).json({ success: true, message: "ƒê·∫∑t ph√≤ng ƒë√£ b·ªã h·ªßy", data: canceledBooking });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

module.exports = router;
